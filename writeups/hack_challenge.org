#+title Challenge
#+author: Alex Crom
#+options: H: 2

* Synopsis
 [Arjen](https://github.com/credmp) heeft een badge-uitdaging gemaakt waarbij steganografie-methoden zijn gebruikt. Bestanden en tekst werden verborgen in een PNG-bestand. De URL werd verstrekt via een QR-code die kon worden gescand tijdens de HTB-meetup van 21 december 2022.
Deze aanwijzingen werden tijdens de uitdaging gegeven door gebruiker credmp.

Op zoek naar een wachtwoordzin.
De afbeelding bevat 3 elementen; iets dat je aan het einde nodig hebt, iets dat je kunt vinden via OSINT (Open Source Intelligence), en iets dat erin zit.
:scroll: TL:DR :scroll:
Vind de vlag in een PNG-bestand met behulp van steganografie-methoden.
Gebruikte hulpmiddelen:

* :scroll: TL:DR :scroll:
Vind de vlag in de  =png= file met steganografie methodes.
Handige tools:
1. kali linux
2. hexdump
3. OSINT =google=
4. pngcheck
5. zsteg
6. stegosuite *v0.8.0-2*
7. cyberchef or python3

* :rocket: Getting Started :rocket:
1. Eerst maken we een map aan en downloaden we deze afbeelding:
#+caption: Challenge
[[../img/79586af7a20d63e149b0852dfa076139-challenge.png ]]
#+begin_src bash
mkdir challenge
wget https://github.com/acnimda/alexcrom/blob/main/img/79586af7a20d63e149b0852dfa076139-challenge.png
#+end_src

2. Maak gebruik van reverse engeneering tools
3. OSINT, wat je ziet

* :mortar_board: Uitleg
** stegosuite
Steganografie is een methode om iets in een afbeelding te verbergen, dit kan tekst zijn, audiobestanden, andere afbeeldingen of scripts

[[http://ftp.de.debian.org/debian/pool/main/s/stegosuite/stegosuite_0.8.0-2_all.deb][stegosuite]] *version 0.8.0-2*
#+begin_src bash
dpkg -i stegosuite 0.8.0-2 all.deb
#+end_src


** Badge vlag
De uitdaging is het vinden van een soort vlag
voorbeeld:
#+begin_src bash
BADGE{Z13t_Er_0nG3ve3r_Zo_U1t}

#+end_src


** :mortar_board: Lessens learned :noexport:
1. do re-use collected wordlists
2. XOR use a key instead of always bruteforce 
3. Check your software versions. 
4. Set a timer :hourglass:, and get out your :rabbit:hole!

*** out of scope :bowtie:
Where ~79586af7a20d63e149b0852dfa076139~ did look odd for a name of an image we could have checked it.
Which I actually did. :warning: this was one of my :rabbit:holes!

a check with ~hashid 79586af7a20d63e149b0852dfa076139~ results in a possible MD5 hash.
with ~hascat~ and a wordlist like ~rockyou.txt~ you might crack the hash.

#+begin_src bash
sudo hashcat -a 0 -m 0 -o crackedpassword.txt \ '79586af7a20d63e149b0852dfa076139' \
/usr/share/wordlists/rockyou.txt

#+end_src

there where two candidates found:
1. Candidates.#1....: `$HEX[206b72697374656e616e6e65]`
2. Candidates.#2....: `$HEX[042a0337c2a156616d6f732103]`

These candidates where compiled with some magic from cybercef
where the outcome was:
1. `206b72697374656e616e6e65` —> kristenanne
2. `042a0337c2a156616d6f732103` —> .*.7¡Vamos!.

 Due to the outcome this was a perfect decoy where I spent most of my time with.


